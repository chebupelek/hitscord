// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hitscord_net.Data.Contexts;

#nullable disable

namespace hitscord_net.Migrations
{
    [DbContext(typeof(HitsContext))]
    partial class HitsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnnouncementChannelDbModelRoleDbModel", b =>
                {
                    b.Property<Guid>("AnnouncementChannelDbModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesToNotifyId")
                        .HasColumnType("uuid");

                    b.HasKey("AnnouncementChannelDbModelId", "RolesToNotifyId");

                    b.HasIndex("RolesToNotifyId");

                    b.ToTable("AnnouncementChannelDbModelRoleDbModel");
                });

            modelBuilder.Entity("ChannelDbModelRoleDbModel", b =>
                {
                    b.Property<Guid>("ChannelDbModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesCanViewId")
                        .HasColumnType("uuid");

                    b.HasKey("ChannelDbModelId", "RolesCanViewId");

                    b.HasIndex("RolesCanViewId");

                    b.ToTable("ChannelDbModelRoleDbModel");
                });

            modelBuilder.Entity("ChannelDbModelRoleDbModel1", b =>
                {
                    b.Property<Guid>("ChannelDbModel1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesCanWriteId")
                        .HasColumnType("uuid");

                    b.HasKey("ChannelDbModel1Id", "RolesCanWriteId");

                    b.HasIndex("RolesCanWriteId");

                    b.ToTable("ChannelDbModelRoleDbModel1");
                });

            modelBuilder.Entity("MessageDbModelRoleDbModel", b =>
                {
                    b.Property<Guid>("MessageDbModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.HasKey("MessageDbModelId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("MessageDbModelRoleDbModel");
                });

            modelBuilder.Entity("RoleDbModelServerDbModel", b =>
                {
                    b.Property<Guid>("RolesCanDeleteUsersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServerDbModelId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesCanDeleteUsersId", "ServerDbModelId");

                    b.HasIndex("ServerDbModelId");

                    b.ToTable("RoleDbModelServerDbModel");
                });

            modelBuilder.Entity("RoleDbModelServerDbModel1", b =>
                {
                    b.Property<Guid>("RolesCanWorkWithChannelsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServerDbModel1Id")
                        .HasColumnType("uuid");

                    b.HasKey("RolesCanWorkWithChannelsId", "ServerDbModel1Id");

                    b.HasIndex("ServerDbModel1Id");

                    b.ToTable("RoleDbModelServerDbModel1");
                });

            modelBuilder.Entity("RoleDbModelServerDbModel2", b =>
                {
                    b.Property<Guid>("RolesCanChangeRolesUsersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServerDbModel2Id")
                        .HasColumnType("uuid");

                    b.HasKey("RolesCanChangeRolesUsersId", "ServerDbModel2Id");

                    b.HasIndex("ServerDbModel2Id");

                    b.ToTable("RoleDbModelServerDbModel2");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.ChannelDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Channel");

                    b.HasDiscriminator<string>("ChannelType").HasValue("ChannelDbModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.LogDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.MessageDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid>("TextChannelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TextChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasDiscriminator<string>("MessageType").HasValue("MessageDbModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.RoleDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.ServerDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.UserDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccountCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AccountTag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("VoiceChannelDbModelId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoiceChannelDbModelId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.UserServerChannelDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserCoordinates");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.UserServerDbModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserServerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId", "ServerId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServerId");

                    b.ToTable("UserServer");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.AnnouncementChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord_net.Models.DBModels.ChannelDbModel");

                    b.HasDiscriminator().HasValue("Announcement");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.TextChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord_net.Models.DBModels.ChannelDbModel");

                    b.Property<bool>("IsMessage")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.VoiceChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord_net.Models.DBModels.ChannelDbModel");

                    b.HasDiscriminator().HasValue("Voice");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.ChannelMessageDbModel", b =>
                {
                    b.HasBaseType("hitscord_net.Models.DBModels.MessageDbModel");

                    b.Property<Guid>("NestedChannelId")
                        .HasColumnType("uuid");

                    b.HasIndex("NestedChannelId");

                    b.HasDiscriminator().HasValue("Channel");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.NormalMessageDbModel", b =>
                {
                    b.HasBaseType("hitscord_net.Models.DBModels.MessageDbModel");

                    b.HasDiscriminator().HasValue("Normal");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.ReplyMessageDbModel", b =>
                {
                    b.HasBaseType("hitscord_net.Models.DBModels.MessageDbModel");

                    b.Property<Guid>("ReplyToMessageId")
                        .HasColumnType("uuid");

                    b.HasIndex("ReplyToMessageId");

                    b.HasDiscriminator().HasValue("Reply");
                });

            modelBuilder.Entity("AnnouncementChannelDbModelRoleDbModel", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.AnnouncementChannelDbModel", null)
                        .WithMany()
                        .HasForeignKey("AnnouncementChannelDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord_net.Models.DBModels.RoleDbModel", null)
                        .WithMany()
                        .HasForeignKey("RolesToNotifyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChannelDbModelRoleDbModel", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.ChannelDbModel", null)
                        .WithMany()
                        .HasForeignKey("ChannelDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord_net.Models.DBModels.RoleDbModel", null)
                        .WithMany()
                        .HasForeignKey("RolesCanViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChannelDbModelRoleDbModel1", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.ChannelDbModel", null)
                        .WithMany()
                        .HasForeignKey("ChannelDbModel1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord_net.Models.DBModels.RoleDbModel", null)
                        .WithMany()
                        .HasForeignKey("RolesCanWriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageDbModelRoleDbModel", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.MessageDbModel", null)
                        .WithMany()
                        .HasForeignKey("MessageDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord_net.Models.DBModels.RoleDbModel", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleDbModelServerDbModel", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.RoleDbModel", null)
                        .WithMany()
                        .HasForeignKey("RolesCanDeleteUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord_net.Models.DBModels.ServerDbModel", null)
                        .WithMany()
                        .HasForeignKey("ServerDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleDbModelServerDbModel1", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.RoleDbModel", null)
                        .WithMany()
                        .HasForeignKey("RolesCanWorkWithChannelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord_net.Models.DBModels.ServerDbModel", null)
                        .WithMany()
                        .HasForeignKey("ServerDbModel1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleDbModelServerDbModel2", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.RoleDbModel", null)
                        .WithMany()
                        .HasForeignKey("RolesCanChangeRolesUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord_net.Models.DBModels.ServerDbModel", null)
                        .WithMany()
                        .HasForeignKey("ServerDbModel2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.ChannelDbModel", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.ServerDbModel", "Server")
                        .WithMany("Channels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.MessageDbModel", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.TextChannelDbModel", "TextChannel")
                        .WithMany("Messages")
                        .HasForeignKey("TextChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord_net.Models.DBModels.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextChannel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.ServerDbModel", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.UserDbModel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.UserDbModel", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.VoiceChannelDbModel", null)
                        .WithMany("Users")
                        .HasForeignKey("VoiceChannelDbModelId");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.UserServerDbModel", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.RoleDbModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord_net.Models.DBModels.ServerDbModel", "Server")
                        .WithMany("UserServer")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord_net.Models.DBModels.UserDbModel", "User")
                        .WithMany("UserServer")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.ChannelMessageDbModel", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.TextChannelDbModel", "NestedChannel")
                        .WithMany()
                        .HasForeignKey("NestedChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NestedChannel");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.ReplyMessageDbModel", b =>
                {
                    b.HasOne("hitscord_net.Models.DBModels.MessageDbModel", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyToMessage");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.ServerDbModel", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("UserServer");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.UserDbModel", b =>
                {
                    b.Navigation("UserServer");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.TextChannelDbModel", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("hitscord_net.Models.DBModels.VoiceChannelDbModel", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
