// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hitscord.Contexts;

#nullable disable

namespace hitscord_new.Migrations
{
    [DbContext(typeof(HitsContext))]
    [Migration("20250629165018_ChatUser")]
    partial class ChatUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatDbModelUserDbModel", b =>
                {
                    b.Property<Guid>("ChatDbModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatDbModelId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserChat", (string)null);
                });

            modelBuilder.Entity("PairDbModelRoleDbModel", b =>
                {
                    b.Property<Guid>("PairDbModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.HasKey("PairDbModelId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PairDbModelRoleDbModel");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Channel");

                    b.HasDiscriminator<string>("ChannelType").HasValue("ChannelDbModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("hitscord.Models.db.ChatDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("hitscord.Models.db.FriendshipApplicationDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserIdFrom")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserIdTo")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserIdFrom")
                        .IsUnique();

                    b.HasIndex("UserIdTo")
                        .IsUnique();

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("hitscord.Models.db.NotificationDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("hitscord.Models.db.PairDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Ends")
                        .HasColumnType("bigint");

                    b.Property<Guid>("FilterId")
                        .HasColumnType("uuid");

                    b.Property<int>("LessonNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("PairVoiceChannelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<long>("Starts")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PairVoiceChannelId");

                    b.HasIndex("ServerId");

                    b.ToTable("Pair");
                });

            modelBuilder.Entity("hitscord.Models.db.PairUserDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PairId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeEnter")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimeLeave")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimeUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PairId");

                    b.HasIndex("UserId");

                    b.ToTable("PairUser");
                });

            modelBuilder.Entity("hitscord.Models.db.RoleDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("hitscord.Models.db.ServerApplicationDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ServerUserName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("ServerApplications");
                });

            modelBuilder.Entity("hitscord.Models.db.ServerDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IconId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("hitscord.Models.db.UserDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccountCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AccountTag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("FriendshipApplication")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IconId")
                        .HasColumnType("uuid");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("NonFriendMessage")
                        .HasColumnType("boolean");

                    b.Property<bool>("Notifiable")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("hitscord.Models.db.UserServerDbModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("BanReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BanTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<string>("UserServerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserServer");
                });

            modelBuilder.Entity("hitscord.Models.db.UserVoiceChannelDbModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsStream")
                        .HasColumnType("boolean");

                    b.Property<int>("MuteStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("VoiceChannelId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("VoiceChannelId");

                    b.ToTable("UserVoiceChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.NotificationChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.ChannelDbModel");

                    b.HasDiscriminator().HasValue("Notification");
                });

            modelBuilder.Entity("hitscord.Models.db.TextChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.ChannelDbModel");

                    b.Property<bool>("IsMessage")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("hitscord.Models.db.VoiceChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.ChannelDbModel");

                    b.Property<int>("MaxCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Voice");
                });

            modelBuilder.Entity("hitscord.Models.db.PairVoiceChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.VoiceChannelDbModel");

                    b.HasDiscriminator().HasValue("PairVoice");
                });

            modelBuilder.Entity("ChatDbModelUserDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ChatDbModel", null)
                        .WithMany()
                        .HasForeignKey("ChatDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PairDbModelRoleDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.PairDbModel", null)
                        .WithMany()
                        .HasForeignKey("PairDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.RoleDbModel", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithMany("Channels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("hitscord.Models.db.FriendshipApplicationDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "UserFrom")
                        .WithOne()
                        .HasForeignKey("hitscord.Models.db.FriendshipApplicationDbModel", "UserIdFrom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "UserTo")
                        .WithOne()
                        .HasForeignKey("hitscord.Models.db.FriendshipApplicationDbModel", "UserIdTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("hitscord.Models.db.NotificationDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.PairDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.PairVoiceChannelDbModel", "PairVoiceChannel")
                        .WithMany("Pairs")
                        .HasForeignKey("PairVoiceChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PairVoiceChannel");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("hitscord.Models.db.PairUserDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.PairDbModel", "Pair")
                        .WithMany()
                        .HasForeignKey("PairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pair");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.RoleDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("hitscord.Models.db.ServerApplicationDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.UserServerDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.RoleDbModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.UserVoiceChannelDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithOne()
                        .HasForeignKey("hitscord.Models.db.UserVoiceChannelDbModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.VoiceChannelDbModel", "VoiceChannel")
                        .WithMany("Users")
                        .HasForeignKey("VoiceChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VoiceChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.ServerDbModel", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("hitscord.Models.db.VoiceChannelDbModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("hitscord.Models.db.PairVoiceChannelDbModel", b =>
                {
                    b.Navigation("Pairs");
                });
#pragma warning restore 612, 618
        }
    }
}
