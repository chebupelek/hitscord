// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hitscord.Contexts;

#nullable disable

namespace hitscord_new.Migrations
{
    [DbContext(typeof(HitsContext))]
    [Migration("20250409135714_Mute")]
    partial class Mute
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("hitscord.Models.db.ChannelDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Channel");

                    b.HasDiscriminator<string>("ChannelType").HasValue("ChannelDbModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("hitscord.Models.db.RoleDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("hitscord.Models.db.ServerDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("hitscord.Models.db.UserDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccountCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AccountTag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("hitscord.Models.db.UserServerDbModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserServerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserServer");
                });

            modelBuilder.Entity("hitscord.Models.db.UserVoiceChannelDbModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("MuteStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("VoiceChannelId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("VoiceChannelId");

                    b.ToTable("UserVoiceChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.TextChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.ChannelDbModel");

                    b.Property<bool>("IsMessage")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("hitscord.Models.db.VoiceChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.ChannelDbModel");

                    b.HasDiscriminator().HasValue("Voice");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithMany("Channels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("hitscord.Models.db.RoleDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("hitscord.Models.db.UserServerDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.RoleDbModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.UserVoiceChannelDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithOne()
                        .HasForeignKey("hitscord.Models.db.UserVoiceChannelDbModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.VoiceChannelDbModel", "VoiceChannel")
                        .WithMany("Users")
                        .HasForeignKey("VoiceChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VoiceChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.ServerDbModel", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("hitscord.Models.db.VoiceChannelDbModel", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
