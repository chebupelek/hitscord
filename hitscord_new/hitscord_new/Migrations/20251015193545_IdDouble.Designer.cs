// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hitscord.Contexts;

#nullable disable

namespace hitscord_new.Migrations
{
    [DbContext(typeof(HitsContext))]
    [Migration("20251015193545_IdDouble")]
    partial class IdDouble
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PairDbModelRoleDbModel", b =>
                {
                    b.Property<Guid>("PairDbModelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.HasKey("PairDbModelId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PairDbModelRoleDbModel");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelCanJoinDbModel", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoiceChannelId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "VoiceChannelId");

                    b.HasIndex("VoiceChannelId");

                    b.ToTable("ChannelCanJoin");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelCanSeeDbModel", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelCanSee");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelCanUseDbModel", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubChannelId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "SubChannelId");

                    b.HasIndex("SubChannelId");

                    b.ToTable("ChannelCanUse");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelCanWriteDbModel", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TextChannelId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "TextChannelId");

                    b.HasIndex("TextChannelId");

                    b.ToTable("ChannelCanWrite");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelCanWriteSubDbModel", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TextChannelId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "TextChannelId");

                    b.HasIndex("TextChannelId");

                    b.ToTable("ChannelCanWriteSub");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Channel");

                    b.HasDiscriminator<string>("ChannelType").HasValue("ChannelDbModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelMessageDbModel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TextChannelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<long?>("ReplyToMessageId")
                        .HasColumnType("bigint");

                    b.Property<List<Guid>>("TaggedRoles")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<List<Guid>>("TaggedUsers")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<Guid>("TextChannelIdDouble")
                        .HasColumnType("uuid");

                    b.HasKey("Id", "TextChannelId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TextChannelId");

                    b.ToTable("ChannelMessage");

                    b.HasDiscriminator<string>("MessageType").HasValue("ChannelMessageDbModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelNotificatedDbModel", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationChannelId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "NotificationChannelId");

                    b.HasIndex("NotificationChannelId");

                    b.ToTable("ChannelNotificated");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelVariantUserDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VariantId");

                    b.ToTable("ChannelVariantUser");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelVoteVariantDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TextChannelId")
                        .HasColumnType("uuid");

                    b.Property<long>("VoteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VoteId", "TextChannelId");

                    b.ToTable("ChannelVoteVariant");
                });

            modelBuilder.Entity("hitscord.Models.db.ChatDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IconFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("IconFileId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("hitscord.Models.db.ChatMessageDbModel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatIdDouble")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<long?>("ReplyToMessageId")
                        .HasColumnType("bigint");

                    b.Property<List<Guid>>("TaggedUsers")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.HasKey("Id", "ChatId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessage");

                    b.HasDiscriminator<string>("MessageType").HasValue("ChatMessageDbModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("hitscord.Models.db.ChatVariantUserDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VariantId");

                    b.ToTable("ChatVariantUser");
                });

            modelBuilder.Entity("hitscord.Models.db.ChatVoteVariantDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<long>("VoteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VoteId", "ChatId");

                    b.ToTable("ChatVoteVariant");
                });

            modelBuilder.Entity("hitscord.Models.db.FileDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("ChannelMessageId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ChatIcId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<long?>("ChatMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Creator")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TextChannelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatIcId");

                    b.HasIndex("ServerId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("ChannelMessageId", "TextChannelId");

                    b.HasIndex("ChatMessageId", "ChatId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("hitscord.Models.db.FriendshipApplicationDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserIdFrom")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserIdTo")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserIdTo");

                    b.HasIndex("UserIdFrom", "UserIdTo")
                        .IsUnique();

                    b.ToTable("FriendshipApplication");
                });

            modelBuilder.Entity("hitscord.Models.db.FriendshipDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserIdFrom")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserIdTo")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserIdTo");

                    b.HasIndex("UserIdFrom", "UserIdTo")
                        .IsUnique();

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("hitscord.Models.db.LastReadChannelMessageDbModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TextChannelId")
                        .HasColumnType("uuid");

                    b.Property<long>("LastReadedMessageId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "TextChannelId");

                    b.HasIndex("TextChannelId");

                    b.ToTable("LastReadChannelMessage");
                });

            modelBuilder.Entity("hitscord.Models.db.LastReadChatMessageDbModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<long>("LastReadedMessageId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("LastReadChatMessage");
                });

            modelBuilder.Entity("hitscord.Models.db.NonNotifiableChannelDbModel", b =>
                {
                    b.Property<Guid>("UserServerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TextChannelId")
                        .HasColumnType("uuid");

                    b.HasKey("UserServerId", "TextChannelId");

                    b.HasIndex("TextChannelId");

                    b.ToTable("NonNotifiableChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.NotificationDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TextChannelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("hitscord.Models.db.PairDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Ends")
                        .HasColumnType("bigint");

                    b.Property<Guid>("FilterId")
                        .HasColumnType("uuid");

                    b.Property<int>("LessonNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("PairVoiceChannelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<long>("Starts")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PairVoiceChannelId");

                    b.HasIndex("ServerId");

                    b.ToTable("Pair");
                });

            modelBuilder.Entity("hitscord.Models.db.PairUserDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PairId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeEnter")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimeLeave")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TimeUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PairId");

                    b.HasIndex("UserId");

                    b.ToTable("PairUser");
                });

            modelBuilder.Entity("hitscord.Models.db.RoleDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<bool>("ServerCanChangeRole")
                        .HasColumnType("boolean");

                    b.Property<bool>("ServerCanCheckAttendance")
                        .HasColumnType("boolean");

                    b.Property<bool>("ServerCanCreateLessons")
                        .HasColumnType("boolean");

                    b.Property<bool>("ServerCanCreateRoles")
                        .HasColumnType("boolean");

                    b.Property<bool>("ServerCanDeleteOthersMessages")
                        .HasColumnType("boolean");

                    b.Property<bool>("ServerCanDeleteUsers")
                        .HasColumnType("boolean");

                    b.Property<bool>("ServerCanIgnoreMaxCount")
                        .HasColumnType("boolean");

                    b.Property<bool>("ServerCanMuteOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("ServerCanWorkChannels")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("hitscord.Models.db.ServerApplicationDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ServerUserName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("ServerApplications");
                });

            modelBuilder.Entity("hitscord.Models.db.ServerDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IconFileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("hitscord.Models.db.SubscribeRoleDbModel", b =>
                {
                    b.Property<Guid>("UserServerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserServerId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("SubscribeRole");
                });

            modelBuilder.Entity("hitscord.Models.db.UserChatDbModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<bool>("NonNotifiable")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("hitscord.Models.db.UserDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccountCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("integer");

                    b.Property<string>("AccountTag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("FriendshipApplication")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IconFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("NonFriendMessage")
                        .HasColumnType("boolean");

                    b.Property<bool>("Notifiable")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationLifeTime")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("hitscord.Models.db.UserServerDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BanReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BanTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<bool>("NonNotifiable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserServerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserServer");
                });

            modelBuilder.Entity("hitscord.Models.db.UserVoiceChannelDbModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoiceChannelId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsStream")
                        .HasColumnType("boolean");

                    b.Property<int>("MuteStatus")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "VoiceChannelId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("VoiceChannelId");

                    b.ToTable("UserVoiceChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.TextChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.ChannelDbModel");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("hitscord.Models.db.VoiceChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.ChannelDbModel");

                    b.Property<int>("MaxCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Voice");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelVoteDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.ChannelMessageDbModel");

                    b.Property<string>("Content")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAnonimous")
                        .HasColumnType("boolean");

                    b.Property<bool>("Multiple")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.HasDiscriminator().HasValue("Vote");
                });

            modelBuilder.Entity("hitscord.Models.db.ClassicChannelMessageDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.ChannelMessageDbModel");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("Classic");
                });

            modelBuilder.Entity("hitscord.Models.db.ChatVoteDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.ChatMessageDbModel");

                    b.Property<string>("Content")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAnonimous")
                        .HasColumnType("boolean");

                    b.Property<bool>("Multiple")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.HasDiscriminator().HasValue("Vote");
                });

            modelBuilder.Entity("hitscord.Models.db.ClassicChatMessageDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.ChatMessageDbModel");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("Classic");
                });

            modelBuilder.Entity("hitscord.Models.db.NotificationChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.TextChannelDbModel");

                    b.HasDiscriminator().HasValue("Notification");
                });

            modelBuilder.Entity("hitscord.Models.db.SubChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.TextChannelDbModel");

                    b.Property<long>("ChannelMessageId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TextChannelId")
                        .HasColumnType("uuid");

                    b.HasIndex("ChannelMessageId", "TextChannelId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Sub");
                });

            modelBuilder.Entity("hitscord.Models.db.PairVoiceChannelDbModel", b =>
                {
                    b.HasBaseType("hitscord.Models.db.VoiceChannelDbModel");

                    b.HasDiscriminator().HasValue("PairVoice");
                });

            modelBuilder.Entity("PairDbModelRoleDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.PairDbModel", null)
                        .WithMany()
                        .HasForeignKey("PairDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.RoleDbModel", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelCanJoinDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.RoleDbModel", "Role")
                        .WithMany("ChannelCanJoin")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.VoiceChannelDbModel", "VoiceChannel")
                        .WithMany("ChannelCanJoin")
                        .HasForeignKey("VoiceChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("VoiceChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelCanSeeDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ChannelDbModel", "Channel")
                        .WithMany("ChannelCanSee")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.RoleDbModel", "Role")
                        .WithMany("ChannelCanSee")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelCanUseDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.RoleDbModel", "Role")
                        .WithMany("ChannelCanUse")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.SubChannelDbModel", "SubChannel")
                        .WithMany("ChannelCanUse")
                        .HasForeignKey("SubChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("SubChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelCanWriteDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.RoleDbModel", "Role")
                        .WithMany("ChannelCanWrite")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.TextChannelDbModel", "TextChannel")
                        .WithMany("ChannelCanWrite")
                        .HasForeignKey("TextChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("TextChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelCanWriteSubDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.RoleDbModel", "Role")
                        .WithMany("ChannelCanWriteSub")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.TextChannelDbModel", "TextChannel")
                        .WithMany("ChannelCanWriteSub")
                        .HasForeignKey("TextChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("TextChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithMany("Channels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelMessageDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.TextChannelDbModel", "TextChannel")
                        .WithMany("Messages")
                        .HasForeignKey("TextChannelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("TextChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelNotificatedDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.NotificationChannelDbModel", "NotificationChannel")
                        .WithMany("ChannelNotificated")
                        .HasForeignKey("NotificationChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.RoleDbModel", "Role")
                        .WithMany("ChannelNotificated")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationChannel");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelVariantUserDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.ChannelVoteVariantDbModel", "Variant")
                        .WithMany("UsersVariants")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelVoteVariantDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ChannelVoteDbModel", "Vote")
                        .WithMany("Variants")
                        .HasForeignKey("VoteId", "TextChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("hitscord.Models.db.ChatDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.FileDbModel", "IconFile")
                        .WithMany()
                        .HasForeignKey("IconFileId");

                    b.Navigation("IconFile");
                });

            modelBuilder.Entity("hitscord.Models.db.ChatMessageDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.ChatDbModel", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("hitscord.Models.db.ChatVariantUserDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.ChatVoteVariantDbModel", "Variant")
                        .WithMany("UsersVariants")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("hitscord.Models.db.ChatVoteVariantDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ChatVoteDbModel", "Vote")
                        .WithMany("Variants")
                        .HasForeignKey("VoteId", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("hitscord.Models.db.FileDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ChatDbModel", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatIcId");

                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithOne("IconFile")
                        .HasForeignKey("hitscord.Models.db.FileDbModel", "ServerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithOne("IconFile")
                        .HasForeignKey("hitscord.Models.db.FileDbModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hitscord.Models.db.ClassicChannelMessageDbModel", "ChannelMessage")
                        .WithMany("Files")
                        .HasForeignKey("ChannelMessageId", "TextChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hitscord.Models.db.ClassicChatMessageDbModel", "ChatMessage")
                        .WithMany("Files")
                        .HasForeignKey("ChatMessageId", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ChannelMessage");

                    b.Navigation("Chat");

                    b.Navigation("ChatMessage");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.FriendshipApplicationDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "UserFrom")
                        .WithMany()
                        .HasForeignKey("UserIdFrom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "UserTo")
                        .WithMany()
                        .HasForeignKey("UserIdTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("hitscord.Models.db.FriendshipDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "UserFrom")
                        .WithMany()
                        .HasForeignKey("UserIdFrom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "UserTo")
                        .WithMany()
                        .HasForeignKey("UserIdTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("hitscord.Models.db.LastReadChannelMessageDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.TextChannelDbModel", "TextChannel")
                        .WithMany()
                        .HasForeignKey("TextChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextChannel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.LastReadChatMessageDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ChatDbModel", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.NonNotifiableChannelDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.TextChannelDbModel", "TextChannel")
                        .WithMany()
                        .HasForeignKey("TextChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserServerDbModel", "UserServer")
                        .WithMany()
                        .HasForeignKey("UserServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextChannel");

                    b.Navigation("UserServer");
                });

            modelBuilder.Entity("hitscord.Models.db.NotificationDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.PairDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.PairVoiceChannelDbModel", "PairVoiceChannel")
                        .WithMany("Pairs")
                        .HasForeignKey("PairVoiceChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PairVoiceChannel");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("hitscord.Models.db.PairUserDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.PairDbModel", "Pair")
                        .WithMany()
                        .HasForeignKey("PairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pair");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.RoleDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("hitscord.Models.db.ServerApplicationDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.SubscribeRoleDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.RoleDbModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserServerDbModel", "UserServer")
                        .WithMany("SubscribeRoles")
                        .HasForeignKey("UserServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserServer");
                });

            modelBuilder.Entity("hitscord.Models.db.UserChatDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ChatDbModel", "Chat")
                        .WithMany("Users")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.UserServerDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ServerDbModel", "Server")
                        .WithMany("Subscribtions")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hitscord.Models.db.UserVoiceChannelDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.UserDbModel", "User")
                        .WithOne()
                        .HasForeignKey("hitscord.Models.db.UserVoiceChannelDbModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hitscord.Models.db.VoiceChannelDbModel", "VoiceChannel")
                        .WithMany("Users")
                        .HasForeignKey("VoiceChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VoiceChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.SubChannelDbModel", b =>
                {
                    b.HasOne("hitscord.Models.db.ClassicChannelMessageDbModel", "ChannelMessage")
                        .WithOne("NestedChannel")
                        .HasForeignKey("hitscord.Models.db.SubChannelDbModel", "ChannelMessageId", "TextChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelMessage");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelDbModel", b =>
                {
                    b.Navigation("ChannelCanSee");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelVoteVariantDbModel", b =>
                {
                    b.Navigation("UsersVariants");
                });

            modelBuilder.Entity("hitscord.Models.db.ChatDbModel", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("hitscord.Models.db.ChatVoteVariantDbModel", b =>
                {
                    b.Navigation("UsersVariants");
                });

            modelBuilder.Entity("hitscord.Models.db.RoleDbModel", b =>
                {
                    b.Navigation("ChannelCanJoin");

                    b.Navigation("ChannelCanSee");

                    b.Navigation("ChannelCanUse");

                    b.Navigation("ChannelCanWrite");

                    b.Navigation("ChannelCanWriteSub");

                    b.Navigation("ChannelNotificated");
                });

            modelBuilder.Entity("hitscord.Models.db.ServerDbModel", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("IconFile");

                    b.Navigation("Roles");

                    b.Navigation("Subscribtions");
                });

            modelBuilder.Entity("hitscord.Models.db.UserDbModel", b =>
                {
                    b.Navigation("IconFile");
                });

            modelBuilder.Entity("hitscord.Models.db.UserServerDbModel", b =>
                {
                    b.Navigation("SubscribeRoles");
                });

            modelBuilder.Entity("hitscord.Models.db.TextChannelDbModel", b =>
                {
                    b.Navigation("ChannelCanWrite");

                    b.Navigation("ChannelCanWriteSub");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("hitscord.Models.db.VoiceChannelDbModel", b =>
                {
                    b.Navigation("ChannelCanJoin");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("hitscord.Models.db.ChannelVoteDbModel", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("hitscord.Models.db.ClassicChannelMessageDbModel", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("NestedChannel");
                });

            modelBuilder.Entity("hitscord.Models.db.ChatVoteDbModel", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("hitscord.Models.db.ClassicChatMessageDbModel", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("hitscord.Models.db.NotificationChannelDbModel", b =>
                {
                    b.Navigation("ChannelNotificated");
                });

            modelBuilder.Entity("hitscord.Models.db.SubChannelDbModel", b =>
                {
                    b.Navigation("ChannelCanUse");
                });

            modelBuilder.Entity("hitscord.Models.db.PairVoiceChannelDbModel", b =>
                {
                    b.Navigation("Pairs");
                });
#pragma warning restore 612, 618
        }
    }
}
